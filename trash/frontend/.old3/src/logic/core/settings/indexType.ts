// Generated by kea-typegen on Sun, 17 Jul 2022 08:48:11 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SidebarType, Theme } from '../../../types/settings'

export interface logicType extends Logic {
  actionCreators: {
    setFontSize: (fontSize: number) => {
      type: 'set font size (settings)';
      payload: {
        fontSize: number;
      };
    };
    setSidebarType: (type: SidebarType) => {
      type: 'set sidebar type (settings)';
      payload: {
        type: SidebarType;
      };
    };
    setTheme: (theme: Theme) => {
      type: 'set theme (settings)';
      payload: {
        theme: Theme;
      };
    };
    toggleSidebar: (newState?: boolean) => {
      type: 'toggle sidebar (settings)';
      payload: {
        newState: boolean | undefined;
      };
    };
  };
  actionKeys: {
    'set font size (settings)': 'setFontSize';
    'set sidebar type (settings)': 'setSidebarType';
    'set theme (settings)': 'setTheme';
    'toggle sidebar (settings)': 'toggleSidebar';
  };
  actionTypes: {
    setFontSize: 'set font size (settings)';
    setSidebarType: 'set sidebar type (settings)';
    setTheme: 'set theme (settings)';
    toggleSidebar: 'toggle sidebar (settings)';
  };
  actions: {
    setFontSize: (fontSize: number) => void;
    setSidebarType: (type: SidebarType) => void;
    setTheme: (theme: Theme) => void;
    toggleSidebar: (newState?: boolean) => void;
  };
  defaults: {
    fontSize: number;
    theme: Theme;
    sidebarType: SidebarType;
    sidebarActive: boolean;
  };
  events: {
    afterMount: () => void;
  };
  key: undefined;
  listeners: {
    setTheme: ((
      action: {
        type: 'set theme (settings)';
        payload: {
          theme: Theme;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setFontSize: ((
      action: {
        type: 'set font size (settings)';
        payload: {
          fontSize: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['settings'];
  pathString: 'settings';
  props: Record<string, unknown>;
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    fontSize: number;
    theme: Theme;
    sidebarType: SidebarType;
    sidebarActive: boolean;
  };
  reducers: {
    fontSize: (state: number, action: any, fullState: any) => number;
    theme: (state: Theme, action: any, fullState: any) => Theme;
    sidebarType: (
      state: SidebarType,
      action: any,
      fullState: any,
    ) => SidebarType;
    sidebarActive: (state: boolean, action: any, fullState: any) => boolean;
  };
  selector: (state: any) => {
    fontSize: number;
    theme: Theme;
    sidebarType: SidebarType;
    sidebarActive: boolean;
  };
  selectors: {
    fontSize: (state: any, props?: any) => number;
    theme: (state: any, props?: any) => Theme;
    sidebarType: (state: any, props?: any) => SidebarType;
    sidebarActive: (state: any, props?: any) => boolean;
  };
  sharedListeners: {};
  values: {
    fontSize: number;
    theme: Theme;
    sidebarType: SidebarType;
    sidebarActive: boolean;
  };
  _isKea: true;
  _isKeaWithKey: false;
}
