// Generated by kea-typegen on Sat, 23 Jul 2022 17:35:45 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IUserService } from '../../../services/interfaces/index'
import type { UserView } from '../../../types/user'

export interface logicType extends Logic {
  actionCreators: {
    loadCurrentUser: () => {
      type: 'load current user (logic.core.app.index)';
      payload: {
        value: true;
      };
    };
    loadCurrentUserSuccess: (currentUser: UserView) => {
      type: 'load current user success (logic.core.app.index)';
      payload: {
        currentUser: UserView;
      };
    };
    loadCurrentUserFailure: () => {
      type: 'load current user failure (logic.core.app.index)';
      payload: {
        value: true;
      };
    };
  };
  actionKeys: {
    'load current user (logic.core.app.index)': 'loadCurrentUser';
    'load current user success (logic.core.app.index)': 'loadCurrentUserSuccess';
    'load current user failure (logic.core.app.index)': 'loadCurrentUserFailure';
  };
  actionTypes: {
    loadCurrentUser: 'load current user (logic.core.app.index)';
    loadCurrentUserSuccess: 'load current user success (logic.core.app.index)';
    loadCurrentUserFailure: 'load current user failure (logic.core.app.index)';
  };
  actions: {
    loadCurrentUser: () => void;
    loadCurrentUserSuccess: (currentUser: UserView) => void;
    loadCurrentUserFailure: () => void;
  };
  defaults: {
    appReady: boolean;
    currentUser: UserView | null;
  };
  events: {};
  key: undefined;
  listeners: {
    loadCurrentUser: ((
      action: {
        type: 'load current user (logic.core.app.index)';
        payload: {
          value: true;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    loadCurrentUserFailure: ((
      action: {
        type: 'load current user failure (logic.core.app.index)';
        payload: {
          value: true;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['logic', 'core', 'app', 'index'];
  pathString: 'logic.core.app.index';
  props: {
    deps: {
      userService: IUserService;
    };
  };
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    appReady: boolean;
    currentUser: UserView | null;
  };
  reducers: {
    appReady: (state: boolean, action: any, fullState: any) => boolean;
    currentUser: (
      state: UserView | null,
      action: any,
      fullState: any,
    ) => UserView | null;
  };
  selector: (state: any) => {
    appReady: boolean;
    currentUser: UserView | null;
  };
  selectors: {
    appReady: (state: any, props?: any) => boolean;
    currentUser: (state: any, props?: any) => UserView | null;
  };
  sharedListeners: {};
  values: {
    appReady: boolean;
    currentUser: UserView | null;
  };
  _isKea: true;
  _isKeaWithKey: false;
}
