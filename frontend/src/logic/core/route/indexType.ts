// Generated by kea-typegen on Wed, 07 Sep 2022 15:40:37 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { IRouteValidators } from '../../../validators/interfaces/index'
import type { Path } from '../../../../node_modules/history/index.d'

export interface logicType extends Logic {
  actionCreators: {
    openRoute: (
      to: string | Partial<Path>,
      state?: object,
    ) => {
      type: 'open route (route)';
      payload: {
        to: string | Partial<Path>;
        state: object | undefined;
      };
    };
    replaceRoute: (
      to: string | Partial<Path>,
      state?: object,
    ) => {
      type: 'replace route (route)';
      payload: {
        to: string | Partial<Path>;
        state: object | undefined;
      };
    };
    openApp: () => {
      type: 'open app (route)';
      payload: {
        to: string;
      };
    };
    openRegisterPage: () => {
      type: 'open register page (route)';
      payload: {
        to: string;
      };
    };
    openLoginPage: () => {
      type: 'open login page (route)';
      payload: {
        to: string;
      };
    };
    openVerifyPage: (email: string) => {
      type: 'open verify page (route)';
      payload: {
        to: string;
        state: {
          verifyEmail: string;
        };
      };
    };
    openUsersPage: () => {
      type: 'open users page (route)';
      payload: {
        to: string;
      };
    };
    openRolesPage: (
      page?: any,
      rows?: any,
    ) => {
      type: 'open roles page (route)';
      payload: {
        to: Partial<Path>;
      };
    };
    openErrorPage: () => {
      type: 'open error page (route)';
      payload: {
        to: string;
      };
    };
    returnToBeforeLogin: () => {
      type: 'return to before login (route)';
      payload: {
        value: true;
      };
    };
  };
  actionKeys: {
    'open route (route)': 'openRoute';
    'replace route (route)': 'replaceRoute';
    'open app (route)': 'openApp';
    'open register page (route)': 'openRegisterPage';
    'open login page (route)': 'openLoginPage';
    'open verify page (route)': 'openVerifyPage';
    'open users page (route)': 'openUsersPage';
    'open roles page (route)': 'openRolesPage';
    'open error page (route)': 'openErrorPage';
    'return to before login (route)': 'returnToBeforeLogin';
  };
  actionTypes: {
    openRoute: 'open route (route)';
    replaceRoute: 'replace route (route)';
    openApp: 'open app (route)';
    openRegisterPage: 'open register page (route)';
    openLoginPage: 'open login page (route)';
    openVerifyPage: 'open verify page (route)';
    openUsersPage: 'open users page (route)';
    openRolesPage: 'open roles page (route)';
    openErrorPage: 'open error page (route)';
    returnToBeforeLogin: 'return to before login (route)';
  };
  actions: {
    openRoute: (to: string | Partial<Path>, state?: object) => void;
    replaceRoute: (to: string | Partial<Path>, state?: object) => void;
    openApp: () => void;
    openRegisterPage: () => void;
    openLoginPage: () => void;
    openVerifyPage: (email: string) => void;
    openUsersPage: () => void;
    openRolesPage: (page?: any, rows?: any) => void;
    openErrorPage: () => void;
    returnToBeforeLogin: () => void;
  };
  defaults: {};
  events: {};
  key: undefined;
  listeners: {
    openRoute: ((
      action: {
        type: 'open route (route)';
        payload: {
          to: string | Partial<Path>;
          state: object | undefined;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    replaceRoute: ((
      action: {
        type: 'replace route (route)';
        payload: {
          to: string | Partial<Path>;
          state: object | undefined;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openApp: ((
      action: {
        type: 'open app (route)';
        payload: {
          to: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openRegisterPage: ((
      action: {
        type: 'open register page (route)';
        payload: {
          to: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openLoginPage: ((
      action: {
        type: 'open login page (route)';
        payload: {
          to: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openVerifyPage: ((
      action: {
        type: 'open verify page (route)';
        payload: {
          to: string;
          state: {
            verifyEmail: string;
          };
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openUsersPage: ((
      action: {
        type: 'open users page (route)';
        payload: {
          to: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openRolesPage: ((
      action: {
        type: 'open roles page (route)';
        payload: {
          to: Partial<Path>;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    openErrorPage: ((
      action: {
        type: 'open error page (route)';
        payload: {
          to: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    returnToBeforeLogin: ((
      action: {
        type: 'return to before login (route)';
        payload: {
          value: true;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['route'];
  pathString: 'route';
  props: {
    deps: {
      routeValidators: IRouteValidators;
    };
  };
  reducer: (state: any, action: any, fullState: any) => {};
  reducers: {};
  selector: (state: any) => {};
  selectors: {
    searchParams: (state: any, props?: any) => Record<string, unknown>;
    hashParams: (state: any, props?: any) => Record<string, unknown>;
  };
  sharedListeners: {
    pushRoute: (
      payload: {
        to: string | Partial<Path>;
        state?: object | undefined;
      },
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: {
          to: string | Partial<Path>;
          state?: object | undefined;
        };
      },
      previousState: any,
    ) => void | Promise<void>;
    replaceRoute: (
      payload: {
        to: string | Partial<Path>;
        state?: object | undefined;
      },
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: {
          to: string | Partial<Path>;
          state?: object | undefined;
        };
      },
      previousState: any,
    ) => void | Promise<void>;
    replaceWithPrevious: (
      payload: any,
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: any;
      },
      previousState: any,
    ) => void | Promise<void>;
  };
  values: {
    searchParams: Record<string, unknown>;
    hashParams: Record<string, unknown>;
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    searchParams: (
      searchParams: Record<string, any>,
    ) => Record<string, unknown>;
    hashParams: (hashParams: Record<string, any>) => Record<string, unknown>;
  };
}
