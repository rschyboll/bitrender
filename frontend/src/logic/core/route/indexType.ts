// Generated by kea-typegen on Mon, 15 Aug 2022 13:17:57 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { Navigator } from '../../../../node_modules/react-router-dom/index.d'
import type { IRouteValidators } from '../../../validators/interfaces/index'

export interface logicType extends Logic {
  actionCreators: {
    openApp: () => {
      type: 'open app (route)';
      payload: {
        value: true;
      };
    };
    openRegisterPage: () => {
      type: 'open register page (route)';
      payload: {
        value: true;
      };
    };
    openLoginPage: () => {
      type: 'open login page (route)';
      payload: {
        url: string;
        state: {
          lastPage: string;
        };
      };
    };
    openVerifyPage: (email: string) => {
      type: 'open verify page (route)';
      payload: {
        email: string;
      };
    };
    openUsersPage: () => {
      type: 'open users page (route)';
      payload: {
        value: true;
      };
    };
    openRolesPage: () => {
      type: 'open roles page (route)';
      payload: {
        value: true;
      };
    };
    openErrorPage: () => {
      type: 'open error page (route)';
      payload: {
        value: true;
      };
    };
    returnToBeforeLogin: () => {
      type: 'return to before login (route)';
      payload: {
        value: true;
      };
    };
  };
  actionKeys: {
    'open app (route)': 'openApp';
    'open register page (route)': 'openRegisterPage';
    'open login page (route)': 'openLoginPage';
    'open verify page (route)': 'openVerifyPage';
    'open users page (route)': 'openUsersPage';
    'open roles page (route)': 'openRolesPage';
    'open error page (route)': 'openErrorPage';
    'return to before login (route)': 'returnToBeforeLogin';
  };
  actionTypes: {
    openApp: 'open app (route)';
    openRegisterPage: 'open register page (route)';
    openLoginPage: 'open login page (route)';
    openVerifyPage: 'open verify page (route)';
    openUsersPage: 'open users page (route)';
    openRolesPage: 'open roles page (route)';
    openErrorPage: 'open error page (route)';
    returnToBeforeLogin: 'return to before login (route)';
  };
  actions: {
    openApp: () => void;
    openRegisterPage: () => void;
    openLoginPage: () => void;
    openVerifyPage: (email: string) => void;
    openUsersPage: () => void;
    openRolesPage: () => void;
    openErrorPage: () => void;
    returnToBeforeLogin: () => void;
  };
  defaults: {
    verifyPageEmail: null | string;
  };
  events: {};
  key: undefined;
  listeners: {
    openLoginPage: ((
      action: {
        type: 'open login page (route)';
        payload: {
          url: string;
          state: {
            lastPage: string;
          };
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    returnToBeforeLogin: ((
      action: {
        type: 'return to before login (route)';
        payload: {
          value: true;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['route'];
  pathString: 'route';
  props: {
    navigator: Navigator;
    deps: {
      routeValidators: IRouteValidators;
    };
  };
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    verifyPageEmail: null | string;
  };
  reducers: {
    verifyPageEmail: (
      state: null | string,
      action: any,
      fullState: any,
    ) => null | string;
  };
  selector: (state: any) => {
    verifyPageEmail: null | string;
  };
  selectors: {
    verifyPageEmail: (state: any, props?: any) => null | string;
  };
  sharedListeners: {
    pushRoute: (
      payload: {
        url: string;
        state?: object | undefined;
      },
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: {
          url: string;
          state?: object | undefined;
        };
      },
      previousState: any,
    ) => void | Promise<void>;
    replaceWithPrevious: (
      payload: any,
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: any;
      },
      previousState: any,
    ) => void | Promise<void>;
  };
  values: {
    verifyPageEmail: null | string;
  };
  _isKea: true;
  _isKeaWithKey: false;
}
