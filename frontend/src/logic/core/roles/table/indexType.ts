// Generated by kea-typegen on Tue, 06 Sep 2022 21:04:19 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IRouteLogic } from '../../../interfaces/index'

export interface logicType extends Logic {
  actionCreators: {
    setCurrentPage: (currentPage: number) => {
      type: 'set current page (roles.table)';
      payload: {
        currentPage: number;
      };
    };
    setRowsPerPage: (rowsPerPage: number) => {
      type: 'set rows per page (roles.table)';
      payload: {
        rowsPerPage: number;
      };
    };
  };
  actionKeys: {
    'set current page (roles.table)': 'setCurrentPage';
    'set rows per page (roles.table)': 'setRowsPerPage';
  };
  actionTypes: {
    setCurrentPage: 'set current page (roles.table)';
    setRowsPerPage: 'set rows per page (roles.table)';
  };
  actions: {
    setCurrentPage: (currentPage: number) => void;
    setRowsPerPage: (rowsPerPage: number) => void;
  };
  defaults: {
    amountOfRecords: number | null;
  };
  events: {};
  key: undefined;
  listeners: {
    setCurrentPage: ((
      action: {
        type: 'set current page (roles.table)';
        payload: {
          currentPage: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setRowsPerPage: ((
      action: {
        type: 'set rows per page (roles.table)';
        payload: {
          rowsPerPage: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['roles', 'table'];
  pathString: 'roles.table';
  props: {
    deps: {
      routeLogic: IRouteLogic;
    };
  };
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    amountOfRecords: number | null;
  };
  reducers: {
    amountOfRecords: (
      state: number | null,
      action: any,
      fullState: any,
    ) => number | null;
  };
  selector: (state: any) => {
    amountOfRecords: number | null;
  };
  selectors: {
    amountOfRecords: (state: any, props?: any) => number | null;
    rowsPerPage: (state: any, props?: any) => number;
    currentPage: (state: any, props?: any) => number;
  };
  sharedListeners: {};
  values: {
    amountOfRecords: number | null;
    rowsPerPage: number;
    currentPage: number;
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    rowsPerPage: (searchParams: Record<string, unknown>) => number;
    currentPage: (searchParams: Record<string, unknown>) => number;
  };
}
