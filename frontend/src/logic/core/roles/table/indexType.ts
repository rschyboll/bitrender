// Generated by kea-typegen on Sun, 23 Oct 2022 13:11:37 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IRouteLogic } from '../../../interfaces/index'
import type { IRoleService } from '../../../../services/interfaces/index'
import type { LoadState } from '../../../../types/index'
import type { RoleColumns, RoleView } from '../../../../schemas/role'
import type { ListRequestInput } from '../../../../services/messages/list'

export interface logicType extends Logic {
  actionCreators: {
    refresh: () => {
      type: 'refresh (roles.table)';
      payload: {
        value: true;
      };
    };
    setSearchString: (searchString: string) => {
      type: 'set search string (roles.table)';
      payload: {
        searchString: string;
      };
    };
    setCurrentPage: (currentPage: number) => {
      type: 'set current page (roles.table)';
      payload: {
        currentPage: number;
      };
    };
    setLocalSearchString: (searchString: string) => {
      type: 'set local search string (roles.table)';
      payload: {
        searchString: string;
      };
    };
    setRowsPerPage: (rowsPerPage: number) => {
      type: 'set rows per page (roles.table)';
      payload: {
        rowsPerPage: number;
      };
    };
    load: () => {
      type: 'load (roles.table)';
      payload: {
        value: true;
      };
    };
    loadSuccess: (
      roles: RoleView[],
      row_count: number,
    ) => {
      type: 'load success (roles.table)';
      payload: {
        roles: RoleView[];
        row_count: number;
      };
    };
    loadFailure: () => {
      type: 'load failure (roles.table)';
      payload: {
        value: true;
      };
    };
  };
  actionKeys: {
    'refresh (roles.table)': 'refresh';
    'set search string (roles.table)': 'setSearchString';
    'set current page (roles.table)': 'setCurrentPage';
    'set local search string (roles.table)': 'setLocalSearchString';
    'set rows per page (roles.table)': 'setRowsPerPage';
    'load (roles.table)': 'load';
    'load success (roles.table)': 'loadSuccess';
    'load failure (roles.table)': 'loadFailure';
  };
  actionTypes: {
    refresh: 'refresh (roles.table)';
    setSearchString: 'set search string (roles.table)';
    setCurrentPage: 'set current page (roles.table)';
    setLocalSearchString: 'set local search string (roles.table)';
    setRowsPerPage: 'set rows per page (roles.table)';
    load: 'load (roles.table)';
    loadSuccess: 'load success (roles.table)';
    loadFailure: 'load failure (roles.table)';
  };
  actions: {
    refresh: () => void;
    setSearchString: (searchString: string) => void;
    setCurrentPage: (currentPage: number) => void;
    setLocalSearchString: (searchString: string) => void;
    setRowsPerPage: (rowsPerPage: number) => void;
    load: () => void;
    loadSuccess: (roles: RoleView[], row_count: number) => void;
    loadFailure: () => void;
  };
  defaults: {
    localSearchString: string | null;
    loadState: LoadState;
    values: RoleView[];
    amountOfRecords: number;
  };
  events: {};
  key: undefined;
  listeners: {
    refresh: ((
      action: {
        type: 'refresh (roles.table)';
        payload: {
          value: true;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    load: ((
      action: {
        type: 'load (roles.table)';
        payload: {
          value: true;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setSearchString: ((
      action: {
        type: 'set search string (roles.table)';
        payload: {
          searchString: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setCurrentPage: ((
      action: {
        type: 'set current page (roles.table)';
        payload: {
          currentPage: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setRowsPerPage: ((
      action: {
        type: 'set rows per page (roles.table)';
        payload: {
          rowsPerPage: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['roles', 'table'];
  pathString: 'roles.table';
  props: {
    deps: {
      routeLogic: IRouteLogic;
      roleService: IRoleService;
    };
  };
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    localSearchString: string | null;
    loadState: LoadState;
    values: RoleView[];
    amountOfRecords: number;
  };
  reducers: {
    localSearchString: (
      state: string | null,
      action: any,
      fullState: any,
    ) => string | null;
    loadState: (state: LoadState, action: any, fullState: any) => LoadState;
    values: (state: RoleView[], action: any, fullState: any) => RoleView[];
    amountOfRecords: (state: number, action: any, fullState: any) => number;
  };
  selector: (state: any) => {
    localSearchString: string | null;
    loadState: LoadState;
    values: RoleView[];
    amountOfRecords: number;
  };
  selectors: {
    localSearchString: (state: any, props?: any) => string | null;
    loadState: (state: any, props?: any) => LoadState;
    values: (state: any, props?: any) => RoleView[];
    amountOfRecords: (state: any, props?: any) => number;
    searchString: (state: any, props?: any) => string;
    urlSearchString: (state: any, props?: any) => string;
    rowsPerPage: (state: any, props?: any) => number;
    currentPage: (state: any, props?: any) => number;
    listRequestInput: (
      state: any,
      props?: any,
    ) => ListRequestInput<RoleColumns>;
  };
  sharedListeners: {};
  values: {
    localSearchString: string | null;
    loadState: LoadState;
    values: RoleView[];
    amountOfRecords: number;
    searchString: string;
    urlSearchString: string;
    rowsPerPage: number;
    currentPage: number;
    listRequestInput: ListRequestInput<RoleColumns>;
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    searchString: (
      urlSearchString: string,
      localSearchString: string | null,
    ) => string;
    urlSearchString: (hashParams: Record<string, unknown>) => string;
    rowsPerPage: (hashParams: Record<string, unknown>) => number;
    currentPage: (hashParams: Record<string, unknown>) => number;
    listRequestInput: (
      currentPage: number,
      rowsPerPage: number,
      urlSearchString: string,
    ) => ListRequestInput<RoleColumns>;
  };
}
