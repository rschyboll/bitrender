// Generated by kea-typegen on Fri, 20 May 2022 18:56:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

import { SidebarType, Theme } from './types'

export interface settingsLogicType extends Logic {
  actionCreators: {
    setSidebarType: (type: SidebarType) => {
      type: 'set sidebar type (logic.settings.index)';
      payload: {
        type: SidebarType;
      };
    };
    setTheme: (theme: Theme) => {
      type: 'set theme (logic.settings.index)';
      payload: {
        theme: Theme;
      };
    };
    toggleSlimSidebar: () => {
      type: 'toggle slim sidebar (logic.settings.index)';
      payload: {
        value: true;
      };
    };
    toggleMobileSidebar: () => {
      type: 'toggle mobile sidebar (logic.settings.index)';
      payload: {
        value: true;
      };
    };
  };
  actionKeys: {
    'set sidebar type (logic.settings.index)': 'setSidebarType';
    'set theme (logic.settings.index)': 'setTheme';
    'toggle slim sidebar (logic.settings.index)': 'toggleSlimSidebar';
    'toggle mobile sidebar (logic.settings.index)': 'toggleMobileSidebar';
  };
  actionTypes: {
    setSidebarType: 'set sidebar type (logic.settings.index)';
    setTheme: 'set theme (logic.settings.index)';
    toggleSlimSidebar: 'toggle slim sidebar (logic.settings.index)';
    toggleMobileSidebar: 'toggle mobile sidebar (logic.settings.index)';
  };
  actions: {
    setSidebarType: (type: SidebarType) => void;
    setTheme: (theme: Theme) => void;
    toggleSlimSidebar: () => void;
    toggleMobileSidebar: () => void;
  };
  defaults: {
    theme: Theme;
    sidebarType: SidebarType;
    sidebarSlimActive: boolean;
    sidebarMobileActive: boolean;
  };
  events: {};
  key: undefined;
  listeners: {};
  path: ['logic', 'settings', 'index'];
  pathString: 'logic.settings.index';
  props: Record<string, unknown>;
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    theme: Theme;
    sidebarType: SidebarType;
    sidebarSlimActive: boolean;
    sidebarMobileActive: boolean;
  };
  reducers: {
    theme: (state: Theme, action: any, fullState: any) => Theme;
    sidebarType: (
      state: SidebarType,
      action: any,
      fullState: any,
    ) => SidebarType;
    sidebarSlimActive: (state: boolean, action: any, fullState: any) => boolean;
    sidebarMobileActive: (
      state: boolean,
      action: any,
      fullState: any,
    ) => boolean;
  };
  selector: (state: any) => {
    theme: Theme;
    sidebarType: SidebarType;
    sidebarSlimActive: boolean;
    sidebarMobileActive: boolean;
  };
  selectors: {
    theme: (state: any, props?: any) => Theme;
    sidebarType: (state: any, props?: any) => SidebarType;
    sidebarSlimActive: (state: any, props?: any) => boolean;
    sidebarMobileActive: (state: any, props?: any) => boolean;
  };
  sharedListeners: {};
  values: {
    theme: Theme;
    sidebarType: SidebarType;
    sidebarSlimActive: boolean;
    sidebarMobileActive: boolean;
  };
  _isKea: true;
  _isKeaWithKey: false;
}
