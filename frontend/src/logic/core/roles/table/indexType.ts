// Generated by kea-typegen on Thu, 15 Sep 2022 08:25:34 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from 'kea'

import type { IRouteLogic } from '../../../interfaces/index'

export interface logicType extends Logic {
  actionCreators: {
    refresh: () => {
      type: 'refresh (roles.table)';
      payload: {
        value: true;
      };
    };
    loadRecords: () => {
      type: 'load records (roles.table)';
      payload: {};
    };
    setLocalSearchString: (searchString: string) => {
      type: 'set local search string (roles.table)';
      payload: {
        searchString: string;
      };
    };
    setSearchString: (searchString: string) => {
      type: 'set search string (roles.table)';
      payload: {
        searchString: string;
      };
    };
    setCurrentPage: (currentPage: number) => {
      type: 'set current page (roles.table)';
      payload: {
        currentPage: number;
      };
    };
    setRowsPerPage: (rowsPerPage: number) => {
      type: 'set rows per page (roles.table)';
      payload: {
        rowsPerPage: number;
      };
    };
  };
  actionKeys: {
    'refresh (roles.table)': 'refresh';
    'load records (roles.table)': 'loadRecords';
    'set local search string (roles.table)': 'setLocalSearchString';
    'set search string (roles.table)': 'setSearchString';
    'set current page (roles.table)': 'setCurrentPage';
    'set rows per page (roles.table)': 'setRowsPerPage';
  };
  actionTypes: {
    refresh: 'refresh (roles.table)';
    loadRecords: 'load records (roles.table)';
    setLocalSearchString: 'set local search string (roles.table)';
    setSearchString: 'set search string (roles.table)';
    setCurrentPage: 'set current page (roles.table)';
    setRowsPerPage: 'set rows per page (roles.table)';
  };
  actions: {
    refresh: () => void;
    loadRecords: () => void;
    setLocalSearchString: (searchString: string) => void;
    setSearchString: (searchString: string) => void;
    setCurrentPage: (currentPage: number) => void;
    setRowsPerPage: (rowsPerPage: number) => void;
  };
  defaults: {
    localSearchString: string | null;
    amountOfRecords: number | null;
  };
  events: {};
  key: undefined;
  listeners: {
    setSearchString: ((
      action: {
        type: 'set search string (roles.table)';
        payload: {
          searchString: string;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setCurrentPage: ((
      action: {
        type: 'set current page (roles.table)';
        payload: {
          currentPage: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
    setRowsPerPage: ((
      action: {
        type: 'set rows per page (roles.table)';
        payload: {
          rowsPerPage: number;
        };
      },
      previousState: any,
    ) => void | Promise<void>)[];
  };
  path: ['roles', 'table'];
  pathString: 'roles.table';
  props: {
    deps: {
      routeLogic: IRouteLogic;
    };
  };
  reducer: (
    state: any,
    action: any,
    fullState: any,
  ) => {
    localSearchString: string | null;
    amountOfRecords: number | null;
  };
  reducers: {
    localSearchString: (
      state: string | null,
      action: any,
      fullState: any,
    ) => string | null;
    amountOfRecords: (
      state: number | null,
      action: any,
      fullState: any,
    ) => number | null;
  };
  selector: (state: any) => {
    localSearchString: string | null;
    amountOfRecords: number | null;
  };
  selectors: {
    localSearchString: (state: any, props?: any) => string | null;
    amountOfRecords: (state: any, props?: any) => number | null;
    searchString: (state: any, props?: any) => string;
    rowsPerPage: (state: any, props?: any) => number;
    currentPage: (state: any, props?: any) => number;
  };
  sharedListeners: {
    loadRecords: (
      payload: any,
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: any;
      },
      previousState: any,
    ) => void | Promise<void>;
  };
  values: {
    localSearchString: string | null;
    amountOfRecords: number | null;
    searchString: string;
    rowsPerPage: number;
    currentPage: number;
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    searchString: (hashParams: Record<string, unknown>) => string;
    rowsPerPage: (hashParams: Record<string, unknown>) => number;
    currentPage: (hashParams: Record<string, unknown>) => number;
  };
}
