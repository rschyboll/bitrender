// Generated by kea-typegen on Mon, 19 Sep 2022 17:29:41 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic, BreakPointFunction } from "kea";

import type { IRouteValidators } from "../../../validators/interfaces/index";
import type { Location, Path } from "history";

export interface logicType extends Logic {
  actionCreators: {
    updateLocationState: (location: Location) => {
      type: "update location state (route)";
      payload: {
        location: Location;
      };
    };
    openRoute: (
      to: string | Partial<Path>,
      state?: object
    ) => {
      type: "open route (route)";
      payload: {
        to: string | Partial<Path>;
        state: object | undefined;
      };
    };
    replaceRoute: (
      to: string | Partial<Path>,
      state?: object
    ) => {
      type: "replace route (route)";
      payload: {
        to: string | Partial<Path>;
        state: object | undefined;
      };
    };
    openApp: () => {
      type: "open app (route)";
      payload: {
        to: string;
      };
    };
    openRegisterPage: () => {
      type: "open register page (route)";
      payload: {
        to: string;
      };
    };
    openLoginPage: () => {
      type: "open login page (route)";
      payload: {
        to: string;
      };
    };
    openVerifyPage: (email: string) => {
      type: "open verify page (route)";
      payload: {
        to: string;
        state: {
          verifyEmail: string;
        };
      };
    };
    openUsersPage: () => {
      type: "open users page (route)";
      payload: {
        to: string;
      };
    };
    openRolesPage: (
      page?: any,
      rows?: any,
      search?: any
    ) => {
      type: "open roles page (route)";
      payload: {
        to: Partial<Path>;
      };
    };
    openErrorPage: () => {
      type: "open error page (route)";
      payload: {
        to: string;
      };
    };
    returnToBeforeLogin: () => {
      type: "return to before login (route)";
      payload: {
        value: true;
      };
    };
  };
  actionKeys: {
    "update location state (route)": "updateLocationState";
    "open route (route)": "openRoute";
    "replace route (route)": "replaceRoute";
    "open app (route)": "openApp";
    "open register page (route)": "openRegisterPage";
    "open login page (route)": "openLoginPage";
    "open verify page (route)": "openVerifyPage";
    "open users page (route)": "openUsersPage";
    "open roles page (route)": "openRolesPage";
    "open error page (route)": "openErrorPage";
    "return to before login (route)": "returnToBeforeLogin";
  };
  actionTypes: {
    updateLocationState: "update location state (route)";
    openRoute: "open route (route)";
    replaceRoute: "replace route (route)";
    openApp: "open app (route)";
    openRegisterPage: "open register page (route)";
    openLoginPage: "open login page (route)";
    openVerifyPage: "open verify page (route)";
    openUsersPage: "open users page (route)";
    openRolesPage: "open roles page (route)";
    openErrorPage: "open error page (route)";
    returnToBeforeLogin: "return to before login (route)";
  };
  actions: {
    updateLocationState: (location: Location) => void;
    openRoute: (to: string | Partial<Path>, state?: object) => void;
    replaceRoute: (to: string | Partial<Path>, state?: object) => void;
    openApp: () => void;
    openRegisterPage: () => void;
    openLoginPage: () => void;
    openVerifyPage: (email: string) => void;
    openUsersPage: () => void;
    openRolesPage: (page?: any, rows?: any, search?: any) => void;
    openErrorPage: () => void;
    returnToBeforeLogin: () => void;
  };
  defaults: {
    currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    };
  };
  events: {};
  key: undefined;
  listeners: {
    openRoute: ((
      action: {
        type: "open route (route)";
        payload: {
          to: string | Partial<Path>;
          state: object | undefined;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    replaceRoute: ((
      action: {
        type: "replace route (route)";
        payload: {
          to: string | Partial<Path>;
          state: object | undefined;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openApp: ((
      action: {
        type: "open app (route)";
        payload: {
          to: string;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openRegisterPage: ((
      action: {
        type: "open register page (route)";
        payload: {
          to: string;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openLoginPage: ((
      action: {
        type: "open login page (route)";
        payload: {
          to: string;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openVerifyPage: ((
      action: {
        type: "open verify page (route)";
        payload: {
          to: string;
          state: {
            verifyEmail: string;
          };
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openUsersPage: ((
      action: {
        type: "open users page (route)";
        payload: {
          to: string;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openRolesPage: ((
      action: {
        type: "open roles page (route)";
        payload: {
          to: Partial<Path>;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    openErrorPage: ((
      action: {
        type: "open error page (route)";
        payload: {
          to: string;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
    returnToBeforeLogin: ((
      action: {
        type: "return to before login (route)";
        payload: {
          value: true;
        };
      },
      previousState: any
    ) => void | Promise<void>)[];
  };
  path: ["route"];
  pathString: "route";
  props: {
    deps: {
      routeValidators: IRouteValidators;
    };
  };
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    };
  };
  reducers: {
    currentLocation: (
      state: {
        state: unknown;
        key: string;
        pathname: string;
        search: string;
        hash: string;
      },
      action: any,
      fullState: any
    ) => {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    };
  };
  selector: (state: any) => {
    currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    };
  };
  selectors: {
    currentLocation: (
      state: any,
      props?: any
    ) => {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    };
    pathname: (state: any, props?: any) => string;
    search: (state: any, props?: any) => string;
    hash: (state: any, props?: any) => string;
    state: (state: any, props?: any) => unknown;
    key: (state: any, props?: any) => string;
    searchParams: (state: any, props?: any) => Record<string, unknown>;
    hashParams: (state: any, props?: any) => Record<string, unknown>;
  };
  sharedListeners: {
    pushRoute: (
      payload: {
        to: string | Partial<Path>;
        state?: object | undefined;
      },
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: {
          to: string | Partial<Path>;
          state?: object | undefined;
        };
      },
      previousState: any
    ) => void | Promise<void>;
    replaceRoute: (
      payload: {
        to: string | Partial<Path>;
        state?: object | undefined;
      },
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: {
          to: string | Partial<Path>;
          state?: object | undefined;
        };
      },
      previousState: any
    ) => void | Promise<void>;
    replaceWithPrevious: (
      payload: any,
      breakpoint: BreakPointFunction,
      action: {
        type: string;
        payload: any;
      },
      previousState: any
    ) => void | Promise<void>;
  };
  values: {
    currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    };
    pathname: string;
    search: string;
    hash: string;
    state: unknown;
    key: string;
    searchParams: Record<string, unknown>;
    hashParams: Record<string, unknown>;
  };
  _isKea: true;
  _isKeaWithKey: false;
  __keaTypeGenInternalSelectorTypes: {
    pathname: (currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    }) => string;
    search: (currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    }) => string;
    hash: (currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    }) => string;
    state: (currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    }) => unknown;
    key: (currentLocation: {
      state: unknown;
      key: string;
      pathname: string;
      search: string;
      hash: string;
    }) => string;
    searchParams: (search: string) => Record<string, unknown>;
    hashParams: (hash: string) => Record<string, unknown>;
  };
}
